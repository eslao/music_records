
# coding: utf-8

# In[1]:

import csv


# In[2]:

#Valid column names in your csv: "BIB_DOC_ID", three-digit marc tag (such as "500"), or five-digit marc tag with indicators (such as "50500")
#Values in BIB_DOC_ID column can contain but do not require leading zeroes
#Values in other columns must not include first subfield tag, which is assumed to be "$$a" and will be added by script
#TO DO: handle first subfield more flexibly

#initialize a list to store the records in
record_list = []

#csv.reader(open(FILENAME, 'rU'), quotechar='"', delimiter = ',')

#read the existing csv
with open('theses.csv', 'rU') as csvfile:
    #sniff to find the format
    #fileDialect = csv.Sniffer().sniff(csvfile.read(1024))
    csvfile.seek(0)
    #create a CSV reader
    myReader = csv.reader(csvfile, quotechar='"', delimiter = ',')
    #read each row
    for row in myReader:
        record_list += [row]
        #do your processing here


# In[4]:

marc_fields = []
for record in record_list:
    if 'BIB_DOC_ID' in record: 
        #print record
        all_columns = record
        bibno_position = [i for i, x in enumerate(record_list[0]) if x == 'BIB_DOC_ID']
        marc_columns = [i for i, x in enumerate(record) if x != 'BIB_DOC_ID']
        #marc_columns = [i for i, x in enumerate(record)]
        for position in marc_columns:
            #print testlist[position]
            marc_fields += [all_columns[position]]
        #print marc_columns
        #print marc_fields
        
        
for record in record_list:
    if 'BIB_DOC_ID' not in record: 
        for position in marc_columns:
            if record[position] != '':
                #print all_columns[position]
                print record[bibno_position[0]].zfill(9) + ' ' + all_columns[position].ljust(5, ' ') + '  L $$a' + record[position]
            #print record[[i for i, x in enumerate(record_list[0]) if x == fieldname][0]].zfill(9) + ' ' + field
        


# In[ ]:



